# –¢–µ—Å—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–º –≤–∏–¥–µ - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—Å—Ç—å,
# –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏—Ö –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ—Ç–µ–ª—å –¥–µ–ª–∞–µ—Ç post –ø–æ—Ç–æ–º –¥–µ–ª–∞–µ—Ç get —ç—Ç–∏—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö - –∫–∞–∫ –ø—Ä–∏–º–µ—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ —É –≤–∞—Å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è - –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –∏–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –Ω–æ –∞—Ç–æ–º–∞—Ä–Ω–æ - –±–æ–ª–µ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç

import random
import string

import pytest
import requests

import utils.sql_helper


def generate_random_string(N):
    return "".join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))


class TestPostRequest:
    """
    –¢–µ—Å—Ç—ã –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def test_got_200(self):
        """
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å—Ç, –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤ –±–∞–∑–µ
        """
        key = generate_random_string(20)
        value = generate_random_string(100)
        r = requests.post("http://flask_server:8000/dictionary", json={"key": key, "value": value})
        assert r.status_code == 200
        assert utils.sql_helper.return_value_from_key(key) == value

    def test_got_409(self):
        """
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π –ø–æ—Å—Ç –∏ –ø–æ—Ç–æ–º —Å–Ω–æ–≤–∞ –ø–æ–≤—Ç–æ—Ä–∏–ª —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å - –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å –≤ –±–¥, –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∫–ª—é—á –≤ –±–¥
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        r = requests.post("http://flask_server:8000/dictionary", json={"key": key, "value": value})
        assert r.status_code == 200
        r = requests.post("http://flask_server:8000/dictionary", json={"key": key, "value": value})
        assert r.status_code == 409
        assert utils.sql_helper.return_value_from_key(key) == value

    @pytest.mark.parametrize(
        "json",
        [
            {generate_random_string(10): generate_random_string(10), "value": generate_random_string(10)},
            None,
            {"key": generate_random_string(10), generate_random_string(10): generate_random_string(10)},
        ],
    )
    def test_got_400(self, json):
        """
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–ª—é—á–µ–º key,–Ω–µ–≤–µ—Ä–Ω—ã–º –∫–ª—é—á–µ–º value –∏ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        """
        r = requests.post("http://flask_server:8000/dictionary", json=json)
        assert r.status_code == 400

    @pytest.mark.parametrize(
        "json",
        [
            {"key": generate_random_string(10), "value": generate_random_string(200)},
            {"key": generate_random_string(200), "value": generate_random_string(10)},
        ],
    )
    def test_abnormal_big_data(self, json):
        """
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º key,–Ω–µ–≤–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º value
        –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å —Ç–µ—Å—Ç–æ–º –≤—ã—à–µ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–æ–º —á—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ
        """
        r = requests.post("http://flask_server:8000/dictionary", json=json)
        assert r.status_code == 400

    @pytest.mark.parametrize(
        "json",
        [
            {"key": f"{generate_random_string(3)}·π∞Ã∫Ã∫ÃïoÕûnÃùÃóÕïÃüÃúÃòÃ¶Õü", "value": generate_random_string(10)},
            {"key": generate_random_string(10), "value": "(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)üôàÃûÃ•Ã±Ã≥Ã≠ÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤"},
        ],
    )
    def test_naughty_strings(self, json):
        """
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–∞–ª json —Å —Å—Ç—Ä–∏–Ω–≥–∞–º–∏ –∏–∑ https://github.com/minimaxir/big-list-of-naughty-strings
        """
        r = requests.post("http://flask_server:8000/dictionary", json=json)
        assert r.status_code == 200


class TestGetRequest:
    """
    –¢–µ—Å—Ç—ã –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def test_got_200(self):
        """
        –ü–æ–ª–æ–∂–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–¥, –ø–æ–ª—É—á–∏–ª–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        utils.sql_helper.add_key_and_value(key, value)
        r = requests.get(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 200
        assert r.json()["key"] == key
        assert r.json()["value"] == value
        assert utils.sql_helper.return_value_from_key(key) == value

    def test_got_404(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç –≤ –±–¥, –ø–æ–ª—É—á–∏–ª–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç
        """
        key = generate_random_string(10)
        r = requests.get(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 404
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"

    def test_got_400_too_big_key(self):
        """
        –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
        """
        key = generate_random_string(100)
        r = requests.get(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 400
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"


class TestPutRequest:
    """
    –¢–µ—Å—Ç—ã –¥–ª—è PUT –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def test_got_200(self):
        """
        –ü–æ–ª–æ–∂–∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–¥, –ø—Ä–æ–∞–ø–¥–µ–π—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ –ø—É—Ç
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        utils.sql_helper.add_key_and_value(key, value)
        value2 = generate_random_string(10)
        r = requests.put(f"http://flask_server:8000/dictionary/{key}", json={"value": value2})
        assert r.status_code == 200
        assert utils.sql_helper.return_value_from_key(key) == value2

    def test_got_404(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç –≤ –±–¥, –ø—Ä–æ–∞–ø–¥–µ–π—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ –ø—É—Ç
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        r = requests.put(f"http://flask_server:8000/dictionary/{key}", json={"value": value})
        assert r.status_code == 404
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"

    def test_got_400_no_data(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ –±–¥, –ø–æ—Å–ª–∞–ª–∏ –ø—É—Ç –±–µ–∑ –¥–∞—Ç—ã
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        utils.sql_helper.add_key_and_value(key, value)
        r = requests.put(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 400

    def test_abnormal_big_data(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ –±–¥, –ø–æ—Å–ª–∞–ª–∏ –ø—É—Ç —Å –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        utils.sql_helper.add_key_and_value(key, value)
        value2 = generate_random_string(101)
        r = requests.put(f"http://flask_server:8000/dictionary/{key}", json={"value": value2})
        assert r.status_code == 400
        assert utils.sql_helper.return_value_from_key(key) == value

    def test_naughty_strings(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ –±–¥, –ø–æ—Å–ª–∞–ª–∏ –ø—É—Ç —Å —Å—Ç—Ä–∏–Ω–≥–∞–º–∏ –∏–∑ https://github.com/minimaxir/big-list-of-naughty-strings
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        utils.sql_helper.add_key_and_value(key, value)
        value2 = "(ÔΩ°‚óï ‚àÄ ‚óïÔΩ°)üôàÃûÃ•Ã±Ã≥Ã≠ÕâÕÖcÃ¨ÃühÕ°aÃ´ÃªÃØÕòoÃ´ÃüÃñÕçÃôÃùÕâsÃóÃ¶Ã≤"
        r = requests.put(f"http://flask_server:8000/dictionary/{key}", json={"value": value2})
        assert r.status_code == 200
        assert utils.sql_helper.return_value_from_key(key) == value2

    def test_got_400_too_big_key(self):
        """
        –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
        """
        key = generate_random_string(100)
        value = generate_random_string(101)
        r = requests.put(f"http://flask_server:8000/dictionary/{key}", data=value)
        assert r.status_code == 400
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"


class TestDeleteRequest:
    """
    –¢–µ—Å—Ç—ã –¥–ª—è DELETE –∑–∞–ø—Ä–æ—Å–æ–≤
    """

    def test_got_200_existing_key(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å—Ç—å –≤ –±–¥, —É–¥–∞–ª–∏–ª–∏,–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ —É–¥–∞–ª–∏–ª–æ—Å—å
        """
        key = generate_random_string(10)
        value = generate_random_string(10)
        r = requests.delete(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 200
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"

    def test_got_200_non_existing_key(self):
        """
        –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç –≤ –±–¥, —É–¥–∞–ª–∏–ª–∏,–ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —á—Ç–æ —É–¥–∞–ª–∏–ª–æ—Å—å
        """
        key = generate_random_string(10)
        r = requests.delete(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 200
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"

    def test_got_400_too_big_key(self):
        """
        –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á
        """
        key = generate_random_string(100)
        r = requests.delete(f"http://flask_server:8000/dictionary/{key}")
        assert r.status_code == 400
        with pytest.raises(Exception) as execinfo:
            utils.sql_helper.return_value_from_key(key)
        assert str(execinfo.value) == "No such key"
